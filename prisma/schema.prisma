// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB's default `_id` and ObjectId type
  clerkId   String   @unique // Link to Clerk's user ID
  email     String   @unique
  firstName String?
  lastName  String?
  bio       String?
  intro     String?
  address   String?
  skills    String[]
  imageUrl  String? // Clerk usually provides this
  role      UserRole @default(USER)
  occupied  Boolean  @default(false) // Is the user currently working on a project?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Social Links, Experience, Badges - REVISIT OPTIONS BELOW
  socialLinks      SocialLink[]
  experiences      Experience[]
  education        Education[]
  previousProjects PreviousProject[]

  earnedSkillBadges          SkillLevelBadge[] // List of badges for skill progression
  earnedSpecializationBadges SpecializationBadge[] // List of badges for expertise areas
  earnedEngagementBadges     EngagementBadge[] // List of badges for community involvement

  // Complementary data not strictly "badges" but displayed prominently
  totalHoursContributed Int
  projectsCompleted     Int
  industriesExperienced String[] // Array of unique industry names (e.g., "Technology", "Healthcare", "Non-profit")

  // Relations to Project and Application models
  postedProjects   Project[]     @relation("BusinessOwnerProjects") // Projects posted by this user
  assignedProjects Project[]     @relation("AssignedStudent") // Projects this student is assigned to
  applications     Application[] @relation("Applicant") // Applications made by this user
}

// Embedded documents for MongoDB (No @id, no @map)
// These models are "embedded" within the User document and don't get their own collection.
type SocialLink {
  type String // e.g., "LinkedIn", "GitHub"
  url  String
}

type Experience {
  id          String
  title       String
  company     String
  startDate   DateTime
  endDate     DateTime? // Optional end date if current
  description String?
}

type Education {
  id          String
  degree      String
  institution String
  startDate   DateTime
  endDate     DateTime?
  description String?
}

type PreviousProject {
  id          String
  title       String
  role        String
  industry    String
  description String
  tags        String[]
  startDate   DateTime
  endDate     DateTime?
}

enum SkillLevelBadge {
  NEWBIE // E.g., First project completed
  BEGINNER // E.g., Completed 3 projects
  INTERMEDIATE // E.g., Completed 10 projects, high ratings
  ADVANCED // E.g., Completed 25 projects, consistent expert ratings
  EXPERT // E.g., Top percentile, proven track record
}

enum SpecializationBadge {
  WEB_DEVELOPER_PRO // Completed multiple web dev projects
  DATA_ANALYST_ACE // Completed multiple data analysis projects
  DESIGN_THINKER // Completed multiple UI/UX projects
  COMMUNITY_LEADER // Actively helps other students, maybe mentor role
  CLOUD_SPECIALIST // Completed multiple cloud-related projects
  MOBILE_MAVEN // Expert in mobile app development
  AI_INNOVATOR // Specialized in AI/ML projects
  CYBERSECURITY_CHAMP // Completed cybersecurity-focused projects
  DEVOPS_GURU // Demonstrated DevOps expertise
  DATABASE_WIZARD // Specialized in database design/management
  FRONTEND_FOCUS // Specialized in frontend/UI development
  BACKEND_BUILDER // Specialized in backend/API development
  PRODUCT_MANAGER // Led or managed project teams
  OPEN_SOURCE_CONTRIBUTOR // Significant contributions to open source projects
}

enum EngagementBadge {
  TOP_CONTRIBUTOR // Highly active, consistently takes projects
  MENTOR // Guides other students (if you build a mentorship feature)
  VETERAN // Completed a high number of projects/hours (e.g., 50 projects OR 200 hours)
  EARLY_BIRD // Frequently among the first to apply or join projects
  TEAM_PLAYER // Consistently collaborates well with others, positive feedback from teammates
  INNOVATOR // Regularly suggests improvements or new ideas for projects/platform
  COMMUNITY_HELPER // Actively answers questions or assists others in the community
  CONSISTENT_PERFORMER // Maintains steady participation and quality over time
}

enum UserRole {
  ADMIN
  BUSINESS_OWNER
  USER // Student
}

model Project {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  // Skills/Requirements: Array of strings for simplicity, or a separate `Skill` model if needed.
  // For now, let's go with a simple array.
  requiredSkills String[]        @default([])
  category       ProjectCategory // Enum for broad categories
  scope          ProjectScope // Enum for difficulty/scope
  status         ProjectStatus   @default(OPEN)

  startDate           DateTime // When the project is intended to begin
  estimatedEndDate    DateTime // When the project is expected to finish
  applicationDeadline DateTime // Deadline for students to apply

  // Payment/Compensation
  budget Float // Fixed budget, depending on business owner
  // You could also add `currency: String?` if needed

  isPublic Boolean @default(true) // All projects are public by default

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  businessOwnerId String @db.ObjectId // ID of the User (BUSINESS_OWNER) who posted this project
  businessOwner   User   @relation("BusinessOwnerProjects", fields: [businessOwnerId], references: [id])

  assignedStudentId String? @db.ObjectId // ID of the User (USER/Student) assigned. Optional because initially null.
  assignedStudent   User?   @relation("AssignedStudent", fields: [assignedStudentId], references: [id])

  applications Application[] @relation("ProjectApplications") // All applications for this project
}

// Enums for Project Model
enum ProjectCategory {
  WEB_DEVELOPMENT
  MOBILE_DEVELOPMENT
  UI_UX_DESIGN
  DATA_SCIENCE
  MACHINE_LEARNING
  BLOCKCHAIN
  GAME_DEVELOPMENT
  OTHER
}

enum ProjectScope {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ProjectStatus {
  OPEN // Open for applications
  IN_REVIEW // Applications are being reviewed
  ASSIGNED // Student has been assigned
  IN_PROGRESS // Project work is ongoing
  COMPLETED // Project is finished
  CANCELLED // Project was cancelled
  ARCHIVED // Project is no longer active
}

// --- NEW MODEL: Application ---
model Application {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String            @db.ObjectId
  applicantId String            @db.ObjectId
  status      ApplicationStatus @default(PENDING) // PENDING, ACCEPTED, REJECTED, WITHDRAWN
  coverLetter String? // Student's message/cover letter
  appliedAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relationships
  project   Project @relation("ProjectApplications", fields: [projectId], references: [id])
  applicant User    @relation("Applicant", fields: [applicantId], references: [id])

  @@unique([projectId, applicantId]) // A student can only apply once to a project
}

// Enum for Application Status
enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}
