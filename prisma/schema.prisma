// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id        String   @id @map("_id") @db.ObjectId // MongoDB's default `_id` and ObjectId type
  clerkId   String   @unique // Link to Clerk's user ID
  email     String   @unique
  firstName String?
  lastName  String?
  bio       String?
  imageUrl  String? // Clerk usually provides this
  role      UserRole @default(USER)
  occupied  Boolean  @default(false) // Is the user currently working on a project?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships (will define other models soon)
  // projects           Project[] @relation("BusinessOwnerProjects") // For business owners
  // appliedProjects    Project[] @relation("StudentAppliedProjects") // For students

  // Social Links, Experience, Badges - REVISIT OPTIONS BELOW
  socialLinks SocialLink[]
  experiences Experience[]

  earnedSkillBadges          SkillLevelBadge[] // List of badges for skill progression
  earnedSpecializationBadges SpecializationBadge[] // List of badges for expertise areas
  earnedEngagementBadges     EngagementBadge[] // List of badges for community involvement

  // Complementary data not strictly "badges" but displayed prominently
  totalHoursContributed Int
  projectsCompleted     Int
  industriesExperienced String[] // Array of unique industry names (e.g., "Technology", "Healthcare", "Non-profit")
}

// Embedded documents for MongoDB (No @id, no @map)
// These models are "embedded" within the User document and don't get their own collection.
type SocialLink {
  type String // e.g., "LinkedIn", "GitHub"
  url  String
}

type Experience {
  title       String
  company     String
  startDate   DateTime
  endDate     DateTime? // Optional end date if current
  description String?
}

enum SkillLevelBadge {
  NEWBIE // E.g., First project completed
  BEGINNER // E.g., Completed 3 projects
  INTERMEDIATE // E.g., Completed 10 projects, high ratings
  ADVANCED // E.g., Completed 25 projects, consistent expert ratings
  EXPERT // E.g., Top percentile, proven track record
}

enum SpecializationBadge {
  WEB_DEVELOPER_PRO // Completed multiple web dev projects
  DATA_ANALYST_ACE // Completed multiple data analysis projects
  DESIGN_THINKER // Completed multiple UI/UX projects
  COMMUNITY_LEADER // Actively helps other students, maybe mentor role
}

enum EngagementBadge {
  TOP_CONTRIBUTOR // Highly active, consistently takes projects
  MENTOR // Guides other students (if you build a mentorship feature)
  VETERAN // Completed a high number of projects/hours (e.g., 50 projects OR 200 hours)
}

enum UserRole {
  ADMIN
  BUSINESS_OWNER
  USER // Student
}
